// ===============================================
// üõ†Ô∏è PATCH : Log toutes les actions Grist (debug)
// ===============================================
const originalApply = grist.docApi.applyUserActions;

grist.docApi.applyUserActions = async function (actions, options = {}) {
  console.group("üì§ applyUserActions appel√©");
  console.log("üßæ Actions :", JSON.stringify(actions, null, 2));
  console.trace("üìç Trace de l'appel");
  console.groupEnd();

  try {
    const result = await originalApply.call(grist.docApi, actions, options);
    console.log("‚úÖ applyUserActions OK ‚úÖ");
    return result;
  } catch (e) {
    console.error("üî• applyUserActions ERREUR üî•", e);
    throw e; // laisse remonter l'erreur
  }
};

// ===============================================
// üì¶ ensureRulesConfigTableExists
// - Cr√©e la table RULES_CONFIG si absente
// - Initialise avec une ligne par colonne du formulaire
// ===============================================
// export async function ensureRulesConfigTableExists(
//   formTableName = "Nom_Table",
//   configTableName = "RULES_CONFIG"
// ) {
//   // 1. V√©rifie les tables existantes
//   const allTables = await grist.docApi.listTables();
//   console.log("üìã Tables existantes : ", allTables);

//   const tableExists = allTables.includes(configTableName);
//   if (tableExists) {
//     console.log("‚úÖ RULES_CONFIG existe d√©j√†.");
//     return;
//   }

//   // 2. Cr√©e la table RULES_CONFIG
//   console.log("‚öô Cr√©ation de la table RULES_CONFIG‚Ä¶");
//   await grist.docApi.applyUserActions([
//     ["AddTable", configTableName, null],
//     ["AddColumn", configTableName, "col_name", { type: "Text" }],
//     ["AddColumn", configTableName, "rule", { type: "Text" }],
//     ["AddColumn", configTableName, "is_key", { type: "Bool" }],
//   ]);
//   console.log("‚úÖ Table RULES_CONFIG cr√©√©e.");

//   // 3. R√©cup√®re les colonnes de la table du formulaire
//   const tableData = await grist.docApi.fetchTable(formTableName);
//   if (!tableData || tableData.length === 0) {
//     console.warn("‚ùå Table source vide ou introuvable :", formTableName);
//     return;
//   }

//   const firstRow = tableData[0];
//   const fieldNames = Object.keys(firstRow).filter(
//     (name) => name !== "id" && name !== "manualSort"
//   );
//   console.log("üß± Colonnes d√©tect√©es :", fieldNames);

//   // 4. Initialise les r√®gles par d√©faut pour chaque colonne
//   const actions = fieldNames.map((colName) => [
//     "AddRecord",
//     configTableName,
//     null,
//     {
//       col_name: colName,
//       rule: "ignore",
//       is_key: false,
//     },
//   ]);

//   if (actions.length > 0) {
//     await grist.docApi.applyUserActions(actions);
//     console.log(`‚úÖ ${actions.length} r√®gles ins√©r√©es.`);
//   } else {
//     console.log("‚Ñπ Aucune colonne d√©tect√©e.");
//   }
// }
